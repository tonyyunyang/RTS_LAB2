
SchedTest.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000050 l       *ABS*	00000000 I2CIE
00000051 l       *ABS*	00000000 I2CIFG
00000052 l       *ABS*	00000000 I2CNDAT
00000071 l       *ABS*	00000000 I2CTCTL
00000072 l       *ABS*	00000000 I2CDCTL
00000073 l       *ABS*	00000000 I2CPSC
00000074 l       *ABS*	00000000 I2CSCLH
00000075 l       *ABS*	00000000 I2CSCLL
00000076 l       *ABS*	00000000 I2CDRB
00000076 l       *ABS*	00000000 I2CDRW
00000118 l       *ABS*	00000000 I2COA
0000011a l       *ABS*	00000000 I2CSA
0000011c l       *ABS*	00000000 I2CIV
00000076 l       *ABS*	00000000 I2CDR
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
00000055 l       *ABS*	00000000 SVSCTL
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
0000012e l       *ABS*	00000000 TA0IV
00000160 l       *ABS*	00000000 TA0CTL
00000170 l       *ABS*	00000000 TA0R
00000162 l       *ABS*	00000000 TA0CCTL0
00000164 l       *ABS*	00000000 TA0CCTL1
00000172 l       *ABS*	00000000 TA0CCR0
00000174 l       *ABS*	00000000 TA0CCR1
00000166 l       *ABS*	00000000 TA0CCTL2
00000176 l       *ABS*	00000000 TA0CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000190 l       *ABS*	00000000 TBR
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
000001c0 l       *ABS*	00000000 DAC12_0CTL
000001c2 l       *ABS*	00000000 DAC12_1CTL
000001c8 l       *ABS*	00000000 DAC12_0DAT
000001ca l       *ABS*	00000000 DAC12_1DAT
00000122 l       *ABS*	00000000 DMACTL0
00000124 l       *ABS*	00000000 DMACTL1
000001e0 l       *ABS*	00000000 DMA0CTL
000001e2 l       *ABS*	00000000 DMA0SA
000001e4 l       *ABS*	00000000 DMA0DA
000001e6 l       *ABS*	00000000 DMA0SZ
000001e8 l       *ABS*	00000000 DMA1CTL
000001ea l       *ABS*	00000000 DMA1SA
000001ec l       *ABS*	00000000 DMA1DA
000001ee l       *ABS*	00000000 DMA1SZ
000001f0 l       *ABS*	00000000 DMA2CTL
000001f2 l       *ABS*	00000000 DMA2SA
000001f4 l       *ABS*	00000000 DMA2DA
000001f6 l       *ABS*	00000000 DMA2SZ
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000004 l       *ABS*	00000000 ME1
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 SchedTest.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Led.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Clock.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Context.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001100 l     O .bss	00000001 CurrentContext
00001102 l     O .bss	00000003 Contexts
00000000 l    df *ABS*	00000000 SchedulerOnline.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_FP.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_EDF.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 TimeTracking.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001106 l     O .bss	00000004 StartTimes
0000110a l     O .bss	00000004 Totals
0000110e l     O .bss	00000001 JobsExecuted
00000000 g       *ABS*	00000000 __data_size
000042ce g     F .text	00000084 RegisterTask
00004282 g     F .text	00000016 ResumeContext
00004252 g     F .text	00000018 InitClock
000044fa g     F .text	0000000c StartTracking
0000454e g       .text	00000000 __udivmodhi4
00004232 g     F .text	0000000a InitLeds
00004036 g     F .text	00000018 CountDelay
000045a0 g       .text	00000000 _etext
000000b4 g       *ABS*	00000000 __bss_size
0000451c g     F .text	00000006 AddJobExecution
00004030 g       .text	00000000 _unexpected_1_
00004030  w      .text	00000000 vector_ffe0
00001110 g     O .bss	00000001 BusyPrio
00004496 g     F .text	00000062 Scheduler_P_FP
000044f8 g     F .text	00000002 Scheduler_P_EDF
000043ca g       .text	00000000 vector_ffec
00004030  w      .text	00000000 vector_fff0
000045a0 g       *ABS*	00000000 __data_load_start
00004030 g       .text	00000000 __dtors_end
00004030  w      .text	00000000 vector_fffc
000041f6 g     F .text	0000003c BlinkYellow
00004030  w      .text	00000000 vector_ffe4
0000424c g     F .text	00000006 ToggleLeds
0000423c g     F .text	00000010 SetLeds
0000ffe0 g     O .vectors	00000020 InterruptVectors
00004352 g     F .text	00000014 UnRegisterTask
00001111 g     O .bss	00000001 Pending
0000426a g     F .text	00000018 ContextSwitch
000041ba g     F .text	0000003c BlinkGreen
0000401c  w      .text	00000000 __do_clear_bss
000043ca g     F .text	000000cc TimerIntrpt
00004030  w      .text	00000000 vector_ffe2
00004030  w      .text	00000000 vector_ffe8
00004034  w      .text	00000000 _unexpected_
0000456a g       .text	00000000 __divmodhi4
00004030  w      .text	00000000 vector_fffa
00001112 g     O .bss	000000a0 Tasks
00004000  w      .text	00000000 _reset_vector__
00004030 g       .text	00000000 __ctors_start
0000400a  w      .text	00000000 __do_copy_data
0000404e g     F .text	00000020 CountRealtimeDelay
00001100 g       .bss	00000000 __bss_start
00004030  w      .text	00000000 vector_ffee
00004030  w      .text	00000000 vector_fff4
0000406e g     F .text	00000110 main
00004030  w      .text	00000000 vector_fff8
00004522 g     F .text	0000002c PrintResults
00004030  w      .text	00000000 vector_fff2
0000417e g     F .text	0000003c BlinkRed
00010000 g       .vectors	00000000 _vectors_end
00004030  w      .text	00000000 vector_ffe6
00004298 g     F .text	00000006 IntDisable
000011b2 g     O .bss	00000002 NextInterruptTime
00004000  w      .text	00000000 __init_stack
00004386 g     F .text	00000044 lcm
00004030 g       .text	00000000 __dtors_start
00004030 g       .text	00000000 __ctors_end
00003900 g       *ABS*	00000000 __stack
00001100 g       .bss	00000000 _edata
000011b4 g       .bss	00000000 _end
00004030  w      .text	00000000 vector_fff6
00004366 g     F .text	00000020 gcd
00004004  w      .text	00000000 __low_level_init
0000402c  w      .text	00000000 __jump_to_main
000042a2 g     F .text	0000002c InitTasks
00001100 g       .bss	00000000 __data_start
00004030  w      .text	00000000 vector_ffea
00004506 g     F .text	00000016 StopTracking
0000429e g     F .text	00000004 RestoreSW



Disassembly of section .text:

00004000 <__init_stack>:
    4000:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004004 <__low_level_init>:
    4004:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4008:	20 01 

0000400a <__do_copy_data>:
    400a:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    400e:	0f 93       	tst	r15		
    4010:	05 24       	jz	$+12     	;abs 0x401c
    4012:	2f 83       	decd	r15		
    4014:	9f 4f a0 45 	mov	17824(r15),4352(r15);0x45a0(r15), 0x1100(r15)
    4018:	00 11 
    401a:	fb 23       	jnz	$-8      	;abs 0x4012

0000401c <__do_clear_bss>:
    401c:	3f 40 b4 00 	mov	#180,	r15	;#0x00b4
    4020:	0f 93       	tst	r15		
    4022:	04 24       	jz	$+10     	;abs 0x402c
    4024:	1f 83       	dec	r15		
    4026:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    402a:	fc 23       	jnz	$-6      	;abs 0x4024

0000402c <__jump_to_main>:
    402c:	30 40 6e 40 	br	#0x406e	

00004030 <__ctors_end>:
    4030:	30 40 34 40 	br	#0x4034	

00004034 <_unexpected_>:
    4034:	00 13       	reti			

00004036 <CountDelay>:
#define YELLOWBLINKPRIO 0
#define GREENBLINKPRIO  1
#define REDBLINKPRIO    2

void CountDelay (volatile uint16_t cnt)
{
    4036:	21 83       	decd	r1		
    4038:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
  while (cnt--);
    403c:	2f 41       	mov	@r1,	r15	
    403e:	0e 4f       	mov	r15,	r14	
    4040:	3e 53       	add	#-1,	r14	;r3 As==11
    4042:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    4046:	0f 93       	tst	r15		
    4048:	f9 23       	jnz	$-12     	;abs 0x403c
}
    404a:	21 53       	incd	r1		
    404c:	30 41       	ret			

0000404e <CountRealtimeDelay>:
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    404e:	0f 5f       	rla	r15		
    4050:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4052:	1d 42 70 01 	mov	&0x0170,r13	
    4056:	0e 43       	clr	r14		
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4058:	07 3c       	jmp	$+16     	;abs 0x4068
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    405a:	1c 42 70 01 	mov	&0x0170,r12	
    405e:	0d 9c       	cmp	r12,	r13	
    4060:	fc 27       	jz	$-6      	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
    4062:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4064:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4068:	0e 9f       	cmp	r15,	r14	
    406a:	f7 2b       	jnc	$-16     	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
      OldTAR = TAR; // store new value of TAR as old value
    }
  }
}
    406c:	30 41       	ret			

0000406e <main>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
}

int main(void) 
{ 
    406e:	31 40 00 39 	mov	#14592,	r1	;#0x3900
  BusyPrio = NUMTASKS; // set the BusyPrio to a number greater than the largest task num
    4072:	f2 40 0a 00 	mov.b	#10,	&0x1110	;#0x000a
    4076:	10 11 

  WDTCTL = WDTPW + WDTHOLD;       // Stop watchdog timer 
    4078:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    407c:	20 01 
  
  InitClock ();
    407e:	b0 12 52 42 	call	#0x4252	

  InitLeds (RED | GREEN | YELLOW | WHITE | BROWN | PURPLE);
    4082:	7f 40 77 00 	mov.b	#119,	r15	;#0x0077
    4086:	b0 12 32 42 	call	#0x4232	
  RegisterTask (0, 1024, 150, BlinkRed, REDBLINKPRIO, 0);
#endif

#ifdef TstSweep
  // note: there 1024 ticks in second
  RegisterTask (0, 1024, 350, BlinkYellow, YELLOWBLINKPRIO, 0); 
    408a:	43 12       	push.b	#0		;r3 As==00
    408c:	43 12       	push.b	#0		;r3 As==00
    408e:	3c 40 f6 41 	mov	#16886,	r12	;#0x41f6
    4092:	3d 40 5e 01 	mov	#350,	r13	;#0x015e
    4096:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    409a:	0f 43       	clr	r15		
    409c:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 512, 140, BlinkGreen, GREENBLINKPRIO, 0);
    40a0:	43 12       	push.b	#0		;r3 As==00
    40a2:	53 12       	push.b	#1		;r3 As==01
    40a4:	3c 40 ba 41 	mov	#16826,	r12	;#0x41ba
    40a8:	3d 40 8c 00 	mov	#140,	r13	;#0x008c
    40ac:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    40b0:	0f 43       	clr	r15		
    40b2:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 256, 30, BlinkRed, REDBLINKPRIO, 0);
    40b6:	43 12       	push.b	#0		;r3 As==00
    40b8:	63 12       	push.b	#2		;r3 As==10
    40ba:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    40be:	3d 40 1e 00 	mov	#30,	r13	;#0x001e
    40c2:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40c6:	0f 43       	clr	r15		
    40c8:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 128, 10, BlinkRed, 3, 0);
    40cc:	43 12       	push.b	#0		;r3 As==00
    40ce:	70 12 03 00 	push.b	#3		;#0x0003
    40d2:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    40d6:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    40da:	3e 40 80 00 	mov	#128,	r14	;#0x0080
    40de:	0f 43       	clr	r15		
    40e0:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 256, 2, BlinkRed, 4, 0);
    40e4:	43 12       	push.b	#0		;r3 As==00
    40e6:	70 12 04 00 	push.b	#4		;#0x0004
    40ea:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    40ee:	2d 43       	mov	#2,	r13	;r3 As==10
    40f0:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40f4:	0f 43       	clr	r15		
    40f6:	b0 12 ce 42 	call	#0x42ce	

  RegisterTask (0, 1024, 10, BlinkYellow, 5, 0); 
    40fa:	43 12       	push.b	#0		;r3 As==00
    40fc:	70 12 05 00 	push.b	#5		;#0x0005
    4100:	3c 40 f6 41 	mov	#16886,	r12	;#0x41f6
    4104:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    4108:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    410c:	0f 43       	clr	r15		
    410e:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 512, 10, BlinkGreen, 6, 0);
    4112:	43 12       	push.b	#0		;r3 As==00
    4114:	70 12 06 00 	push.b	#6		;#0x0006
    4118:	3c 40 ba 41 	mov	#16826,	r12	;#0x41ba
    411c:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    4120:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    4124:	0f 43       	clr	r15		
    4126:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 256, 5, BlinkRed, 7, 0);
    412a:	43 12       	push.b	#0		;r3 As==00
    412c:	70 12 07 00 	push.b	#7		;#0x0007
    4130:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    4134:	3d 40 05 00 	mov	#5,	r13	;#0x0005
    4138:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    413c:	0f 43       	clr	r15		
    413e:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 128, 5, BlinkRed, 8, 0);
    4142:	31 50 20 00 	add	#32,	r1	;#0x0020
    4146:	43 12       	push.b	#0		;r3 As==00
    4148:	70 12 08 00 	push.b	#8		;#0x0008
    414c:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    4150:	3d 40 05 00 	mov	#5,	r13	;#0x0005
    4154:	3e 40 80 00 	mov	#128,	r14	;#0x0080
    4158:	0f 43       	clr	r15		
    415a:	b0 12 ce 42 	call	#0x42ce	
  RegisterTask (0, 256, 2, BlinkRed, 9, 0);
    415e:	43 12       	push.b	#0		;r3 As==00
    4160:	70 12 09 00 	push.b	#9		;#0x0009
    4164:	3c 40 7e 41 	mov	#16766,	r12	;#0x417e
    4168:	2d 43       	mov	#2,	r13	;r3 As==10
    416a:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    416e:	0f 43       	clr	r15		
    4170:	b0 12 ce 42 	call	#0x42ce	
#endif


  _EINT();                        // Enable interrupts
    4174:	32 d2       	eint			
    4176:	31 52       	add	#8,	r1	;r2 As==11

  while(1) {
    EnterLowPowerMode3(); // idle task, set to low power mode 3 
    4178:	32 c0 d0 00 	bic	#208,	r2	;#0x00d0
    417c:	fd 3f       	jmp	$-4      	;abs 0x4178

0000417e <BlinkRed>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
}

void BlinkRed (uint16_t ExecutionTime)
{
    417e:	0b 12       	push	r11		
    4180:	0b 4f       	mov	r15,	r11	
  SetLeds (RED, 1);
    4182:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4184:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    4188:	b0 12 3c 42 	call	#0x423c	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    418c:	0f 4b       	mov	r11,	r15	
    418e:	0f 5f       	rla	r15		
    4190:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4192:	1d 42 70 01 	mov	&0x0170,r13	
    4196:	0e 43       	clr	r14		
    4198:	07 3c       	jmp	$+16     	;abs 0x41a8
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    419a:	1c 42 70 01 	mov	&0x0170,r12	
    419e:	0d 9c       	cmp	r12,	r13	
    41a0:	fc 27       	jz	$-6      	;abs 0x419a
    {
      TicksPassed++; // increment ticks counter
    41a2:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    41a4:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    41a8:	0e 9f       	cmp	r15,	r14	
    41aa:	f7 2b       	jnc	$-16     	;abs 0x419a

void BlinkRed (uint16_t ExecutionTime)
{
  SetLeds (RED, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
    41ac:	4e 43       	clr.b	r14		
    41ae:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    41b2:	b0 12 3c 42 	call	#0x423c	
}
    41b6:	3b 41       	pop	r11		
    41b8:	30 41       	ret			

000041ba <BlinkGreen>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
}

void BlinkGreen (uint16_t ExecutionTime)
{
    41ba:	0b 12       	push	r11		
    41bc:	0b 4f       	mov	r15,	r11	
  SetLeds (GREEN, 1);
    41be:	5e 43       	mov.b	#1,	r14	;r3 As==01
    41c0:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    41c4:	b0 12 3c 42 	call	#0x423c	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    41c8:	0f 4b       	mov	r11,	r15	
    41ca:	0f 5f       	rla	r15		
    41cc:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    41ce:	1d 42 70 01 	mov	&0x0170,r13	
    41d2:	0e 43       	clr	r14		
    41d4:	07 3c       	jmp	$+16     	;abs 0x41e4
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    41d6:	1c 42 70 01 	mov	&0x0170,r12	
    41da:	0d 9c       	cmp	r12,	r13	
    41dc:	fc 27       	jz	$-6      	;abs 0x41d6
    {
      TicksPassed++; // increment ticks counter
    41de:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    41e0:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    41e4:	0e 9f       	cmp	r15,	r14	
    41e6:	f7 2b       	jnc	$-16     	;abs 0x41d6

void BlinkGreen (uint16_t ExecutionTime)
{
  SetLeds (GREEN, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
    41e8:	4e 43       	clr.b	r14		
    41ea:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    41ee:	b0 12 3c 42 	call	#0x423c	
}
    41f2:	3b 41       	pop	r11		
    41f4:	30 41       	ret			

000041f6 <BlinkYellow>:
    }
  }
}

void BlinkYellow (uint16_t ExecutionTime)
{
    41f6:	0b 12       	push	r11		
    41f8:	0b 4f       	mov	r15,	r11	
  SetLeds (YELLOW, 1);
    41fa:	5e 43       	mov.b	#1,	r14	;r3 As==01
    41fc:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    4200:	b0 12 3c 42 	call	#0x423c	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    4204:	0f 4b       	mov	r11,	r15	
    4206:	0f 5f       	rla	r15		
    4208:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    420a:	1d 42 70 01 	mov	&0x0170,r13	
    420e:	0e 43       	clr	r14		
    4210:	07 3c       	jmp	$+16     	;abs 0x4220
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    4212:	1c 42 70 01 	mov	&0x0170,r12	
    4216:	0d 9c       	cmp	r12,	r13	
    4218:	fc 27       	jz	$-6      	;abs 0x4212
    {
      TicksPassed++; // increment ticks counter
    421a:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    421c:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4220:	0e 9f       	cmp	r15,	r14	
    4222:	f7 2b       	jnc	$-16     	;abs 0x4212

void BlinkYellow (uint16_t ExecutionTime)
{
  SetLeds (YELLOW, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
    4224:	4e 43       	clr.b	r14		
    4226:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    422a:	b0 12 3c 42 	call	#0x423c	
}
    422e:	3b 41       	pop	r11		
    4230:	30 41       	ret			

00004232 <InitLeds>:
    4232:	c2 df 32 00 	bis.b	r15,	&0x0032	
    4236:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
    423a:	30 41       	ret			

0000423c <SetLeds>:
    423c:	4e 93       	tst.b	r14		
    423e:	03 24       	jz	$+8      	;abs 0x4246
    4240:	c2 df 31 00 	bis.b	r15,	&0x0031	
    4244:	30 41       	ret			
    4246:	c2 cf 31 00 	bic.b	r15,	&0x0031	
    424a:	30 41       	ret			

0000424c <ToggleLeds>:
    424c:	c2 ef 31 00 	xor.b	r15,	&0x0031	
    4250:	30 41       	ret			

00004252 <InitClock>:
    4252:	b2 40 c6 01 	mov	#454,	&0x0160	;#0x01c6
    4256:	60 01 
    4258:	82 43 72 01 	mov	#0,	&0x0172	;r3 As==00
    425c:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    4260:	62 01 
    4262:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    4266:	60 01 
    4268:	30 41       	ret			

0000426a <ContextSwitch>:
    426a:	5f 42 00 11 	mov.b	&0x1100,r15	
    426e:	4e 4f       	mov.b	r15,	r14	
    4270:	de 42 31 00 	mov.b	&0x0031,4354(r14);0x1102(r14)
    4274:	02 11 
    4276:	5f 53       	inc.b	r15		
    4278:	c2 4f 00 11 	mov.b	r15,	&0x1100	
    427c:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
    4280:	30 41       	ret			

00004282 <ResumeContext>:
    4282:	5f 42 00 11 	mov.b	&0x1100,r15	
    4286:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4288:	c2 4f 00 11 	mov.b	r15,	&0x1100	
    428c:	7f f3       	and.b	#-1,	r15	;r3 As==11
    428e:	3f 50 02 11 	add	#4354,	r15	;#0x1102
    4292:	e2 4f 31 00 	mov.b	@r15,	&0x0031	
    4296:	30 41       	ret			

00004298 <IntDisable>:

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    4298:	0f 42       	mov	r2,	r15	
  _DINT();
    429a:	32 c2       	dint			
  return (sw);
}
    429c:	30 41       	ret			

0000429e <RestoreSW>:

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    429e:	02 4f       	mov	r15,	r2	
}  
    42a0:	30 41       	ret			

000042a2 <InitTasks>:
 * Should be called with interrupt disabled.
 * The clock must be started elsewhere.
 */

void InitTasks (void)
{			
    42a2:	7e 40 09 00 	mov.b	#9,	r14	;#0x0009
  uint8_t i=NUMTASKS-1; 
  do { 
    Taskp t = &Tasks[i];
    42a6:	4f 4e       	mov.b	r14,	r15	
    42a8:	0f 5f       	rla	r15		
    42aa:	0f 5f       	rla	r15		
    42ac:	0f 5f       	rla	r15		
    42ae:	0f 5f       	rla	r15		
    42b0:	3f 50 12 11 	add	#4370,	r15	;#0x1112
    t->Flags = t->Activated = t->Invoked = 0;
    42b4:	cf 43 07 00 	mov.b	#0,	7(r15)	;r3 As==00, 0x0007(r15)
    42b8:	cf 43 06 00 	mov.b	#0,	6(r15)	;r3 As==00, 0x0006(r15)
    42bc:	5d 4f 06 00 	mov.b	6(r15),	r13	;0x0006(r15)
    42c0:	7d f3       	and.b	#-1,	r13	;r3 As==11
    42c2:	8f 4d 08 00 	mov	r13,	8(r15)	;0x0008(r15)
  } while (i--);
    42c6:	7e 53       	add.b	#-1,	r14	;r3 As==11
    42c8:	7e 93       	cmp.b	#-1,	r14	;r3 As==11
    42ca:	ed 23       	jnz	$-36     	;abs 0x42a6
}
    42cc:	30 41       	ret			

000042ce <RegisterTask>:
 * Each priority level has at most one task.
 */

uint8_t RegisterTask (uint16_t Phasing, uint16_t Period, uint16_t ExecutionTime,
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
    42ce:	0b 12       	push	r11		
    42d0:	0a 12       	push	r10		
    42d2:	09 12       	push	r9		
    42d4:	05 12       	push	r5		
    42d6:	05 41       	mov	r1,	r5	
    42d8:	35 50 0a 00 	add	#10,	r5	;#0x000a
    42dc:	6b 45       	mov.b	@r5,	r11	
    42de:	59 45 02 00 	mov.b	2(r5),	r9	;0x0002(r5)
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
    42e2:	7b 90 0a 00 	cmp.b	#10,	r11	;#0x000a
    42e6:	02 28       	jnc	$+6      	;abs 0x42ec
    42e8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    42ea:	2e 3c       	jmp	$+94     	;abs 0x4348
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately
    42ec:	0e 5e       	rla	r14		
    42ee:	0e 5e       	rla	r14		

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
    42f0:	0e 93       	tst	r14		
    42f2:	03 20       	jnz	$+8      	;abs 0x42fa
    42f4:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    42f8:	27 3c       	jmp	$+80     	;abs 0x4348

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    42fa:	05 42       	mov	r2,	r5	
  _DINT();
    42fc:	32 c2       	dint			
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
    42fe:	7b f3       	and.b	#-1,	r11	;r3 As==11
    4300:	0b 5b       	rla	r11		
    4302:	0b 5b       	rla	r11		
    4304:	0b 5b       	rla	r11		
    4306:	0b 5b       	rla	r11		
    4308:	3b 50 12 11 	add	#4370,	r11	;#0x1112
  if (t->Flags) rtc = E_BUSY; 
    430c:	1a 4b 08 00 	mov	8(r11),	r10	;0x0008(r11)
    4310:	0a 93       	tst	r10		
    4312:	02 24       	jz	$+6      	;abs 0x4318
    4314:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4316:	17 3c       	jmp	$+48     	;abs 0x4346
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
    4318:	0f 5f       	rla	r15		
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
  if (t->Flags) rtc = E_BUSY; 
  else {
    t->NextRelease = 0 + Phasing;
    431a:	0f 5f       	rla	r15		
    431c:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
    t->Period    = Period; 
    4320:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    t->NextPendingDeadline = t->NextRelease + Period;
    4324:	2e 5b       	add	@r11,	r14	
    4326:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    t->Activated = t->Invoked = 0; 
    432a:	cb 4a 07 00 	mov.b	r10,	7(r11)	;0x0007(r11)
    432e:	cb 4a 06 00 	mov.b	r10,	6(r11)	;0x0006(r11)
    t->Taskf     = TaskFunc; 
    4332:	8b 4c 0c 00 	mov	r12,	12(r11)	;0x000c(r11)
    t->ExecutionTime = ExecutionTime;
    4336:	8b 4d 0a 00 	mov	r13,	10(r11)	;0x000a(r11)
    t->Flags     = Flags | TRIGGERED;
    433a:	79 d0 40 00 	bis.b	#64,	r9	;#0x0040
    433e:	79 f3       	and.b	#-1,	r9	;r3 As==11
    4340:	8b 49 08 00 	mov	r9,	8(r11)	;0x0008(r11)
    4344:	4f 4a       	mov.b	r10,	r15	
}

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    4346:	02 45       	mov	r5,	r2	
    t->Flags     = Flags | TRIGGERED;

  }
  RestoreSW (sw);
  return (rtc);
}
    4348:	35 41       	pop	r5		
    434a:	39 41       	pop	r9		
    434c:	3a 41       	pop	r10		
    434e:	3b 41       	pop	r11		
    4350:	30 41       	ret			

00004352 <UnRegisterTask>:

uint8_t UnRegisterTask (uint8_t t)
{
  Tasks[t].Flags = 0;
    4352:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4354:	0f 5f       	rla	r15		
    4356:	1f 53       	inc	r15		
    4358:	0f 5f       	rla	r15		
    435a:	0f 5f       	rla	r15		
    435c:	0f 5f       	rla	r15		
    435e:	8f 43 12 11 	mov	#0,	4370(r15);r3 As==00, 0x1112(r15)
  return (E_SUCCESS);
}  
    4362:	4f 43       	clr.b	r15		
    4364:	30 41       	ret			

00004366 <gcd>:

  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/
// for calculating hyper period
int gcd(int a, int b) {
    4366:	0b 12       	push	r11		
    4368:	0a 12       	push	r10		
    436a:	09 12       	push	r9		
    436c:	09 4e       	mov	r14,	r9	
  if (b == 0) {
    436e:	0e 93       	tst	r14		
    4370:	06 24       	jz	$+14     	;abs 0x437e
    return a;
  }
  return gcd(b, a % b);
    4372:	0c 4f       	mov	r15,	r12	
    4374:	0a 4e       	mov	r14,	r10	
    4376:	b0 12 6a 45 	call	#0x456a	
    437a:	0f 49       	mov	r9,	r15	
    437c:	f7 3f       	jmp	$-16     	;abs 0x436c
}
    437e:	39 41       	pop	r9		
    4380:	3a 41       	pop	r10		
    4382:	3b 41       	pop	r11		
    4384:	30 41       	ret			

00004386 <lcm>:

// for calculating hyper period
int lcm(int a, int b) {
    4386:	0b 12       	push	r11		
    4388:	0a 12       	push	r10		
    438a:	09 12       	push	r9		
    438c:	08 12       	push	r8		
    438e:	08 4e       	mov	r14,	r8	
    4390:	09 4e       	mov	r14,	r9	
    4392:	0a 4f       	mov	r15,	r10	
  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/
// for calculating hyper period
int gcd(int a, int b) {
  if (b == 0) {
    4394:	09 93       	tst	r9		
    4396:	07 24       	jz	$+16     	;abs 0x43a6
    return a;
  }
  return gcd(b, a % b);
    4398:	0c 4a       	mov	r10,	r12	
    439a:	0a 49       	mov	r9,	r10	
    439c:	b0 12 6a 45 	call	#0x456a	
    43a0:	0a 49       	mov	r9,	r10	
    43a2:	09 4e       	mov	r14,	r9	
    43a4:	f7 3f       	jmp	$-16     	;abs 0x4394
    43a6:	02 12       	push	r2		
    43a8:	32 c2       	dint			
    43aa:	03 43       	nop			
    43ac:	82 48 32 01 	mov	r8,	&0x0132	
    43b0:	82 4f 38 01 	mov	r15,	&0x0138	
    43b4:	1c 42 3a 01 	mov	&0x013a,r12	
    43b8:	32 41       	pop	r2		
    43ba:	b0 12 6a 45 	call	#0x456a	
}

// for calculating hyper period
int lcm(int a, int b) {
  return (a * b) / gcd(a, b);
}
    43be:	0f 4c       	mov	r12,	r15	
    43c0:	38 41       	pop	r8		
    43c2:	39 41       	pop	r9		
    43c4:	3a 41       	pop	r10		
    43c6:	3b 41       	pop	r11		
    43c8:	30 41       	ret			

000043ca <TimerIntrpt>:

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
{
    43ca:	0f 12       	push	r15		
    43cc:	0e 12       	push	r14		
    43ce:	0d 12       	push	r13		
    43d0:	0c 12       	push	r12		
    43d2:	0b 12       	push	r11		
    43d4:	0a 12       	push	r10		
    43d6:	09 12       	push	r9		
    43d8:	08 12       	push	r8		
    43da:	07 12       	push	r7		
  ContextSwitch();
    43dc:	b0 12 6a 42 	call	#0x426a	

  /* Super simple, single task example */
  // This part is to only get the next interrupt time
  // uint16_t hyperperiod = 0;
  uint8_t i = 0;
  uint16_t oldNextInterruptTime = NextInterruptTime; // This is the current time when interrupt occurrs
    43e0:	18 42 b2 11 	mov	&0x11b2,r8	
  // for (i = 0; i < NUMTASKS; i++) {
  //   Taskp t = &Tasks[i];
  //   hyperperiod = lcm(hyperperiod, t->Period);
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    43e4:	07 48       	mov	r8,	r7	
    43e6:	37 f0 ff 0f 	and	#4095,	r7	;#0x0fff
    43ea:	04 24       	jz	$+10     	;abs 0x43f4
    43ec:	3f 40 12 11 	mov	#4370,	r15	;#0x1112
// for calculating hyper period
int lcm(int a, int b) {
  return (a * b) / gcd(a, b);
}

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
    43f0:	0e 4f       	mov	r15,	r14	
    43f2:	0f 3c       	jmp	$+32     	;abs 0x4412
    43f4:	3f 40 12 11 	mov	#4370,	r15	;#0x1112
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    for (i = 0; i < NUMTASKS; i++) {
      Taskp t = &Tasks[i];
      t->NextRelease += t->Period;
    43f8:	9f 5f 04 00 	add	4(r15),	0(r15)	;0x0004(r15), 0x0000(r15)
    43fc:	00 00 
      t->Activated++;
    43fe:	df 53 06 00 	inc.b	6(r15)		;0x0006(r15)
      t->FlagNextInterrupt = 0;
    4402:	cf 43 0f 00 	mov.b	#0,	15(r15)	;r3 As==00, 0x000f(r15)
    4406:	3f 50 10 00 	add	#16,	r15	;#0x0010
  //   Taskp t = &Tasks[i];
  //   hyperperiod = lcm(hyperperiod, t->Period);
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    for (i = 0; i < NUMTASKS; i++) {
    440a:	3f 90 b2 11 	cmp	#4530,	r15	;#0x11b2
    440e:	f4 23       	jnz	$-22     	;abs 0x43f8
    4410:	ed 3f       	jmp	$-36     	;abs 0x43ec
  }


  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    if (t->FlagNextInterrupt == TT) {
    4412:	ee 92 0f 00 	cmp.b	#4,	15(r14)	;r2 As==10, 0x000f(r14)
    4416:	05 20       	jnz	$+12     	;abs 0x4422
      t->NextRelease += t->Period;
    4418:	9e 5e 04 00 	add	4(r14),	0(r14)	;0x0004(r14), 0x0000(r14)
    441c:	00 00 
      t->FlagNextInterrupt = 0;
    441e:	ce 43 0f 00 	mov.b	#0,	15(r14)	;r3 As==00, 0x000f(r14)
    4422:	3e 50 10 00 	add	#16,	r14	;#0x0010
      t->FlagNextInterrupt = 0;
    }
  }


  for (i = 0; i < NUMTASKS; i++) {
    4426:	3e 90 b2 11 	cmp	#4530,	r14	;#0x11b2
    442a:	f3 23       	jnz	$-24     	;abs 0x4412
      t->FlagNextInterrupt = 0;
    }
  }

  Taskp t = &Tasks[0];
  NextInterruptTime = t->NextRelease;
    442c:	19 42 12 11 	mov	&0x1112,r9	
    4430:	3e 40 12 11 	mov	#4370,	r14	;#0x1112


  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    DetermineNextInterruptTime(t->NextRelease);
    4434:	2d 4e       	mov	@r14,	r13	
    4436:	0d 99       	cmp	r9,	r13	
    4438:	01 2c       	jc	$+4      	;abs 0x443c
    443a:	09 4d       	mov	r13,	r9	
    443c:	3e 50 10 00 	add	#16,	r14	;#0x0010

  Taskp t = &Tasks[0];
  NextInterruptTime = t->NextRelease;


  for (i = 0; i < NUMTASKS; i++) {
    4440:	3e 90 b2 11 	cmp	#4530,	r14	;#0x11b2
    4444:	f7 23       	jnz	$-16     	;abs 0x4434
    4446:	82 49 b2 11 	mov	r9,	&0x11b2	
  }

  
  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    if (t->NextRelease == NextInterruptTime) {
    444a:	29 9f       	cmp	@r15,	r9	
    444c:	02 20       	jnz	$+6      	;abs 0x4452
      t->FlagNextInterrupt = TT;
    444e:	ef 42 0f 00 	mov.b	#4,	15(r15)	;r2 As==10, 0x000f(r15)
    }
    if ((oldNextInterruptTime % t->Period == 0) && (oldNextInterruptTime % (1024*4) != 0)) {
    4452:	0c 48       	mov	r8,	r12	
    4454:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    4458:	b0 12 4e 45 	call	#0x454e	
    445c:	0e 93       	tst	r14		
    445e:	04 20       	jnz	$+10     	;abs 0x4468
    4460:	07 9e       	cmp	r14,	r7	
    4462:	02 24       	jz	$+6      	;abs 0x4468
      t->Activated++;
    4464:	df 53 06 00 	inc.b	6(r15)		;0x0006(r15)
    4468:	3f 50 10 00 	add	#16,	r15	;#0x0010
    Taskp t = &Tasks[i];
    DetermineNextInterruptTime(t->NextRelease);
  }

  
  for (i = 0; i < NUMTASKS; i++) {
    446c:	3f 90 b2 11 	cmp	#4530,	r15	;#0x11b2
    4470:	ec 23       	jnz	$-38     	;abs 0x444a
  /* End of example*/

  /* ---------------------------------------------------------------- */
 

  TACCR0 = NextInterruptTime;
    4472:	82 49 72 01 	mov	r9,	&0x0172	

  CALL_SCHEDULER;
    4476:	3f 40 12 11 	mov	#4370,	r15	;#0x1112
    447a:	b0 12 96 44 	call	#0x4496	

  ResumeContext();
    447e:	b0 12 82 42 	call	#0x4282	
}
    4482:	37 41       	pop	r7		
    4484:	38 41       	pop	r8		
    4486:	39 41       	pop	r9		
    4488:	3a 41       	pop	r10		
    448a:	3b 41       	pop	r11		
    448c:	3c 41       	pop	r12		
    448e:	3d 41       	pop	r13		
    4490:	3e 41       	pop	r14		
    4492:	3f 41       	pop	r15		
    4494:	00 13       	reti			

00004496 <Scheduler_P_FP>:
    4496:	0b 12       	push	r11		
    4498:	0a 12       	push	r10		
    449a:	09 12       	push	r9		
    449c:	0a 4f       	mov	r15,	r10	
    449e:	59 42 10 11 	mov.b	&0x1110,r9	
    44a2:	c2 43 10 11 	mov.b	#0,	&0x1110	;r3 As==00
    44a6:	21 3c       	jmp	$+68     	;abs 0x44ea
    44a8:	5b 42 10 11 	mov.b	&0x1110,r11	
    44ac:	7b f3       	and.b	#-1,	r11	;r3 As==11
    44ae:	0b 5b       	rla	r11		
    44b0:	0b 5b       	rla	r11		
    44b2:	0b 5b       	rla	r11		
    44b4:	0b 5b       	rla	r11		
    44b6:	0b 5a       	add	r10,	r11	
    44b8:	0d 3c       	jmp	$+28     	;abs 0x44d4
    44ba:	32 d2       	eint			
    44bc:	5e 53       	inc.b	r14		
    44be:	cb 4e 07 00 	mov.b	r14,	7(r11)	;0x0007(r11)
    44c2:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    44c6:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
    44ca:	32 c2       	dint			
    44cc:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    44d0:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
    44d4:	5e 4b 07 00 	mov.b	7(r11),	r14	;0x0007(r11)
    44d8:	cb 9e 06 00 	cmp.b	r14,	6(r11)	;0x0006(r11)
    44dc:	04 24       	jz	$+10     	;abs 0x44e6
    44de:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    44e2:	08 00 
    44e4:	ea 23       	jnz	$-42     	;abs 0x44ba
    44e6:	d2 53 10 11 	inc.b	&0x1110	
    44ea:	c2 99 10 11 	cmp.b	r9,	&0x1110	
    44ee:	dc 2b       	jnc	$-70     	;abs 0x44a8
    44f0:	39 41       	pop	r9		
    44f2:	3a 41       	pop	r10		
    44f4:	3b 41       	pop	r11		
    44f6:	30 41       	ret			

000044f8 <Scheduler_P_EDF>:
    44f8:	30 41       	ret			

000044fa <StartTracking>:
    44fa:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44fc:	0f 5f       	rla	r15		
    44fe:	9f 42 70 01 	mov	&0x0170,4358(r15);0x1106(r15)
    4502:	06 11 
    4504:	30 41       	ret			

00004506 <StopTracking>:
    4506:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4508:	0f 5f       	rla	r15		
    450a:	1e 42 70 01 	mov	&0x0170,r14	
    450e:	1e 5f 0a 11 	add	4362(r15),r14	;0x110a(r15)
    4512:	1e 8f 06 11 	sub	4358(r15),r14	;0x1106(r15)
    4516:	8f 4e 0a 11 	mov	r14,	4362(r15);0x110a(r15)
    451a:	30 41       	ret			

0000451c <AddJobExecution>:
    451c:	d2 53 0e 11 	inc.b	&0x110e	
    4520:	30 41       	ret			

00004522 <PrintResults>:
    4522:	3e 40 0a 11 	mov	#4362,	r14	;#0x110a
    4526:	2d 4e       	mov	@r14,	r13	
    4528:	c2 4d 21 00 	mov.b	r13,	&0x0021	
    452c:	3f 4e       	mov	@r14+,	r15	
    452e:	0f 4d       	mov	r13,	r15	
    4530:	8f 10       	swpb	r15		
    4532:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4534:	c2 4f 29 00 	mov.b	r15,	&0x0029	
    4538:	2f 4e       	mov	@r14,	r15	
    453a:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    453e:	8f 10       	swpb	r15		
    4540:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4542:	c2 4f 1d 00 	mov.b	r15,	&0x001d	
    4546:	d2 42 0e 11 	mov.b	&0x110e,&0x0035	
    454a:	35 00 
    454c:	30 41       	ret			

0000454e <__udivmodhi4>:
    454e:	0e ee       	xor	r14,	r14	
    4550:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    4554:	05 3c       	jmp	$+12     	;abs 0x4560
    4556:	0d 10       	rrc	r13		
    4558:	0e 6e       	rlc	r14		
    455a:	0e 9a       	cmp	r10,	r14	
    455c:	01 28       	jnc	$+4      	;abs 0x4560
    455e:	0e 8a       	sub	r10,	r14	
    4560:	0c 6c       	rlc	r12		
    4562:	0d 6d       	rlc	r13		
    4564:	1b 83       	dec	r11		
    4566:	f7 23       	jnz	$-16     	;abs 0x4556
    4568:	30 41       	ret			

0000456a <__divmodhi4>:
    456a:	0d 43       	clr	r13		
    456c:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    4570:	03 28       	jnc	$+8      	;abs 0x4578
    4572:	3c e3       	inv	r12		
    4574:	1c 53       	inc	r12		
    4576:	2d d2       	bis	#4,	r13	;r2 As==10
    4578:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    457c:	03 28       	jnc	$+8      	;abs 0x4584
    457e:	3a e3       	inv	r10		
    4580:	1a 53       	inc	r10		
    4582:	3d d2       	bis	#8,	r13	;r2 As==11
    4584:	b0 12 4e 45 	call	#0x454e	
    4588:	0d 10       	rrc	r13		
    458a:	2d b2       	bit	#4,	r13	;r2 As==10
    458c:	04 28       	jnc	$+10     	;abs 0x4596
    458e:	3e e3       	inv	r14		
    4590:	1e 53       	inc	r14		
    4592:	3c e3       	inv	r12		
    4594:	1c 53       	inc	r12		
    4596:	3d b2       	bit	#8,	r13	;r2 As==11
    4598:	02 28       	jnc	$+6      	;abs 0x459e
    459a:	3c e3       	inv	r12		
    459c:	1c 53       	inc	r12		
    459e:	30 41       	ret			

Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	30 40 30 40 30 40 30 40 30 40 30 40 ca 43 30 40     0@0@0@0@0@0@.C0@
    fff0:	30 40 30 40 30 40 30 40 30 40 30 40 30 40 00 40     0@0@0@0@0@0@0@.@
