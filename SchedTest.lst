
SchedTest.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000050 l       *ABS*	00000000 I2CIE
00000051 l       *ABS*	00000000 I2CIFG
00000052 l       *ABS*	00000000 I2CNDAT
00000071 l       *ABS*	00000000 I2CTCTL
00000072 l       *ABS*	00000000 I2CDCTL
00000073 l       *ABS*	00000000 I2CPSC
00000074 l       *ABS*	00000000 I2CSCLH
00000075 l       *ABS*	00000000 I2CSCLL
00000076 l       *ABS*	00000000 I2CDRB
00000076 l       *ABS*	00000000 I2CDRW
00000118 l       *ABS*	00000000 I2COA
0000011a l       *ABS*	00000000 I2CSA
0000011c l       *ABS*	00000000 I2CIV
00000076 l       *ABS*	00000000 I2CDR
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
00000055 l       *ABS*	00000000 SVSCTL
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
0000012e l       *ABS*	00000000 TA0IV
00000160 l       *ABS*	00000000 TA0CTL
00000170 l       *ABS*	00000000 TA0R
00000162 l       *ABS*	00000000 TA0CCTL0
00000164 l       *ABS*	00000000 TA0CCTL1
00000172 l       *ABS*	00000000 TA0CCR0
00000174 l       *ABS*	00000000 TA0CCR1
00000166 l       *ABS*	00000000 TA0CCTL2
00000176 l       *ABS*	00000000 TA0CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000190 l       *ABS*	00000000 TBR
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
000001c0 l       *ABS*	00000000 DAC12_0CTL
000001c2 l       *ABS*	00000000 DAC12_1CTL
000001c8 l       *ABS*	00000000 DAC12_0DAT
000001ca l       *ABS*	00000000 DAC12_1DAT
00000122 l       *ABS*	00000000 DMACTL0
00000124 l       *ABS*	00000000 DMACTL1
000001e0 l       *ABS*	00000000 DMA0CTL
000001e2 l       *ABS*	00000000 DMA0SA
000001e4 l       *ABS*	00000000 DMA0DA
000001e6 l       *ABS*	00000000 DMA0SZ
000001e8 l       *ABS*	00000000 DMA1CTL
000001ea l       *ABS*	00000000 DMA1SA
000001ec l       *ABS*	00000000 DMA1DA
000001ee l       *ABS*	00000000 DMA1SZ
000001f0 l       *ABS*	00000000 DMA2CTL
000001f2 l       *ABS*	00000000 DMA2SA
000001f4 l       *ABS*	00000000 DMA2DA
000001f6 l       *ABS*	00000000 DMA2SZ
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000004 l       *ABS*	00000000 ME1
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 SchedTest.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Led.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Clock.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Context.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001100 l     O .bss	00000001 CurrentContext
00001102 l     O .bss	0000000a Contexts
00000000 l    df *ABS*	00000000 SchedulerOnline.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_FP.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_EDF.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 TimeTracking.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
0000110c l     O .bss	00000004 StartTimes
00001110 l     O .bss	00000004 Totals
00001114 l     O .bss	00000001 JobsExecuted
00000000 g       *ABS*	00000000 __data_size
00004242 g     F .text	00000084 RegisterTask
000041dc g     F .text	00000016 ResumeContext
000041ac g     F .text	00000018 InitClock
00004476 g     F .text	0000000c StartTracking
000044ca g       .text	00000000 __udivmodhi4
0000418c g     F .text	0000000a InitLeds
00004036 g     F .text	00000018 CountDelay
0000451c g       .text	00000000 _etext
0000004a g       *ABS*	00000000 __bss_size
00004498 g     F .text	00000006 AddJobExecution
00004030 g       .text	00000000 _unexpected_1_
00004030  w      .text	00000000 vector_ffe0
00001116 g     O .bss	00000001 BusyPrio
00004412 g     F .text	00000062 Scheduler_P_FP
00004474 g     F .text	00000002 Scheduler_P_EDF
0000433e g       .text	00000000 vector_ffec
00004030  w      .text	00000000 vector_fff0
0000451c g       *ABS*	00000000 __data_load_start
00004030 g       .text	00000000 __dtors_end
00004030  w      .text	00000000 vector_fffc
00004150 g     F .text	0000003c BlinkYellow
00004030  w      .text	00000000 vector_ffe4
000041a6 g     F .text	00000006 ToggleLeds
00004196 g     F .text	00000010 SetLeds
0000ffe0 g     O .vectors	00000020 InterruptVectors
000042c6 g     F .text	00000014 UnRegisterTask
00001117 g     O .bss	00000001 Pending
000041c4 g     F .text	00000018 ContextSwitch
00004114 g     F .text	0000003c BlinkGreen
0000401c  w      .text	00000000 __do_clear_bss
0000433e g     F .text	000000d4 TimerIntrpt
00004030  w      .text	00000000 vector_ffe2
00004030  w      .text	00000000 vector_ffe8
00004034  w      .text	00000000 _unexpected_
000044e6 g       .text	00000000 __divmodhi4
00004030  w      .text	00000000 vector_fffa
00001118 g     O .bss	00000030 Tasks
00004000  w      .text	00000000 _reset_vector__
00004030 g       .text	00000000 __ctors_start
0000400a  w      .text	00000000 __do_copy_data
0000404e g     F .text	00000020 CountRealtimeDelay
00001100 g       .bss	00000000 __bss_start
00004030  w      .text	00000000 vector_ffee
00004030  w      .text	00000000 vector_fff4
0000406e g     F .text	0000006a main
00004030  w      .text	00000000 vector_fff8
0000449e g     F .text	0000002c PrintResults
00004030  w      .text	00000000 vector_fff2
000040d8 g     F .text	0000003c BlinkRed
00010000 g       .vectors	00000000 _vectors_end
00004030  w      .text	00000000 vector_ffe6
000041f2 g     F .text	00000006 IntDisable
00001148 g     O .bss	00000002 NextInterruptTime
00004000  w      .text	00000000 __init_stack
000042fa g     F .text	00000044 lcm
00004030 g       .text	00000000 __dtors_start
00004030 g       .text	00000000 __ctors_end
00003900 g       *ABS*	00000000 __stack
00001100 g       .bss	00000000 _edata
0000114a g       .bss	00000000 _end
00004030  w      .text	00000000 vector_fff6
000042da g     F .text	00000020 gcd
00004004  w      .text	00000000 __low_level_init
0000402c  w      .text	00000000 __jump_to_main
000041fc g     F .text	00000046 InitTasks
00001100 g       .bss	00000000 __data_start
00004030  w      .text	00000000 vector_ffea
00004482 g     F .text	00000016 StopTracking
000041f8 g     F .text	00000004 RestoreSW



Disassembly of section .text:

00004000 <__init_stack>:
    4000:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004004 <__low_level_init>:
    4004:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4008:	20 01 

0000400a <__do_copy_data>:
    400a:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    400e:	0f 93       	tst	r15		
    4010:	05 24       	jz	$+12     	;abs 0x401c
    4012:	2f 83       	decd	r15		
    4014:	9f 4f 1c 45 	mov	17692(r15),4352(r15);0x451c(r15), 0x1100(r15)
    4018:	00 11 
    401a:	fb 23       	jnz	$-8      	;abs 0x4012

0000401c <__do_clear_bss>:
    401c:	3f 40 4a 00 	mov	#74,	r15	;#0x004a
    4020:	0f 93       	tst	r15		
    4022:	04 24       	jz	$+10     	;abs 0x402c
    4024:	1f 83       	dec	r15		
    4026:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    402a:	fc 23       	jnz	$-6      	;abs 0x4024

0000402c <__jump_to_main>:
    402c:	30 40 6e 40 	br	#0x406e	

00004030 <__ctors_end>:
    4030:	30 40 34 40 	br	#0x4034	

00004034 <_unexpected_>:
    4034:	00 13       	reti			

00004036 <CountDelay>:
#define YELLOWBLINKPRIO 0
#define GREENBLINKPRIO  1
#define REDBLINKPRIO    2

void CountDelay (volatile uint16_t cnt)
{
    4036:	21 83       	decd	r1		
    4038:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
  while (cnt--);
    403c:	2f 41       	mov	@r1,	r15	
    403e:	0e 4f       	mov	r15,	r14	
    4040:	3e 53       	add	#-1,	r14	;r3 As==11
    4042:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    4046:	0f 93       	tst	r15		
    4048:	f9 23       	jnz	$-12     	;abs 0x403c
}
    404a:	21 53       	incd	r1		
    404c:	30 41       	ret			

0000404e <CountRealtimeDelay>:
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    404e:	0f 5f       	rla	r15		
    4050:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4052:	1d 42 70 01 	mov	&0x0170,r13	
    4056:	0e 43       	clr	r14		
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4058:	07 3c       	jmp	$+16     	;abs 0x4068
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    405a:	1c 42 70 01 	mov	&0x0170,r12	
    405e:	0d 9c       	cmp	r12,	r13	
    4060:	fc 27       	jz	$-6      	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
    4062:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4064:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4068:	0e 9f       	cmp	r15,	r14	
    406a:	f7 2b       	jnc	$-16     	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
      OldTAR = TAR; // store new value of TAR as old value
    }
  }
}
    406c:	30 41       	ret			

0000406e <main>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
}

int main(void) 
{ 
    406e:	31 40 00 39 	mov	#14592,	r1	;#0x3900
  BusyPrio = NUMTASKS; // set the BusyPrio to a number greater than the largest task num
    4072:	f2 40 03 00 	mov.b	#3,	&0x1116	;#0x0003
    4076:	16 11 

  WDTCTL = WDTPW + WDTHOLD;       // Stop watchdog timer 
    4078:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    407c:	20 01 
  
  InitClock ();
    407e:	b0 12 ac 41 	call	#0x41ac	

  InitLeds (RED | GREEN | YELLOW | WHITE | BROWN | PURPLE);
    4082:	7f 40 77 00 	mov.b	#119,	r15	;#0x0077
    4086:	b0 12 8c 41 	call	#0x418c	
  RegisterTask (0, 256, 30, BlinkRed, REDBLINKPRIO, 0); // highest priority
#endif

#ifdef Tst2
  // note: there 1024 ticks in second
  RegisterTask (0, 256, 30, BlinkYellow, YELLOWBLINKPRIO, 0); 
    408a:	43 12       	push.b	#0		;r3 As==00
    408c:	43 12       	push.b	#0		;r3 As==00
    408e:	3c 40 50 41 	mov	#16720,	r12	;#0x4150
    4092:	3d 40 1e 00 	mov	#30,	r13	;#0x001e
    4096:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    409a:	0f 43       	clr	r15		
    409c:	b0 12 42 42 	call	#0x4242	
  RegisterTask (0, 512, 150, BlinkGreen, GREENBLINKPRIO, 0);
    40a0:	43 12       	push.b	#0		;r3 As==00
    40a2:	53 12       	push.b	#1		;r3 As==01
    40a4:	3c 40 14 41 	mov	#16660,	r12	;#0x4114
    40a8:	3d 40 96 00 	mov	#150,	r13	;#0x0096
    40ac:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    40b0:	0f 43       	clr	r15		
    40b2:	b0 12 42 42 	call	#0x4242	
  RegisterTask (0, 1024, 350, BlinkRed, REDBLINKPRIO, 0);
    40b6:	43 12       	push.b	#0		;r3 As==00
    40b8:	63 12       	push.b	#2		;r3 As==10
    40ba:	3c 40 d8 40 	mov	#16600,	r12	;#0x40d8
    40be:	3d 40 5e 01 	mov	#350,	r13	;#0x015e
    40c2:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    40c6:	0f 43       	clr	r15		
    40c8:	b0 12 42 42 	call	#0x4242	
  RegisterTask (0, 128, 5, BlinkRed, 8, 0);
  RegisterTask (0, 256, 2, BlinkRed, 9, 0);
#endif


  _EINT();                        // Enable interrupts
    40cc:	32 d2       	eint			
    40ce:	31 50 0c 00 	add	#12,	r1	;#0x000c

  while(1) {
    EnterLowPowerMode3(); // idle task, set to low power mode 3 
    40d2:	32 c0 d0 00 	bic	#208,	r2	;#0x00d0
    40d6:	fd 3f       	jmp	$-4      	;abs 0x40d2

000040d8 <BlinkRed>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
}

void BlinkRed (uint16_t ExecutionTime)
{
    40d8:	0b 12       	push	r11		
    40da:	0b 4f       	mov	r15,	r11	
  SetLeds (RED, 1);
    40dc:	5e 43       	mov.b	#1,	r14	;r3 As==01
    40de:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    40e2:	b0 12 96 41 	call	#0x4196	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    40e6:	0f 4b       	mov	r11,	r15	
    40e8:	0f 5f       	rla	r15		
    40ea:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    40ec:	1d 42 70 01 	mov	&0x0170,r13	
    40f0:	0e 43       	clr	r14		
    40f2:	07 3c       	jmp	$+16     	;abs 0x4102
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    40f4:	1c 42 70 01 	mov	&0x0170,r12	
    40f8:	0d 9c       	cmp	r12,	r13	
    40fa:	fc 27       	jz	$-6      	;abs 0x40f4
    {
      TicksPassed++; // increment ticks counter
    40fc:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    40fe:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4102:	0e 9f       	cmp	r15,	r14	
    4104:	f7 2b       	jnc	$-16     	;abs 0x40f4

void BlinkRed (uint16_t ExecutionTime)
{
  SetLeds (RED, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
    4106:	4e 43       	clr.b	r14		
    4108:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    410c:	b0 12 96 41 	call	#0x4196	
}
    4110:	3b 41       	pop	r11		
    4112:	30 41       	ret			

00004114 <BlinkGreen>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
}

void BlinkGreen (uint16_t ExecutionTime)
{
    4114:	0b 12       	push	r11		
    4116:	0b 4f       	mov	r15,	r11	
  SetLeds (GREEN, 1);
    4118:	5e 43       	mov.b	#1,	r14	;r3 As==01
    411a:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    411e:	b0 12 96 41 	call	#0x4196	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    4122:	0f 4b       	mov	r11,	r15	
    4124:	0f 5f       	rla	r15		
    4126:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4128:	1d 42 70 01 	mov	&0x0170,r13	
    412c:	0e 43       	clr	r14		
    412e:	07 3c       	jmp	$+16     	;abs 0x413e
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    4130:	1c 42 70 01 	mov	&0x0170,r12	
    4134:	0d 9c       	cmp	r12,	r13	
    4136:	fc 27       	jz	$-6      	;abs 0x4130
    {
      TicksPassed++; // increment ticks counter
    4138:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    413a:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    413e:	0e 9f       	cmp	r15,	r14	
    4140:	f7 2b       	jnc	$-16     	;abs 0x4130

void BlinkGreen (uint16_t ExecutionTime)
{
  SetLeds (GREEN, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
    4142:	4e 43       	clr.b	r14		
    4144:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    4148:	b0 12 96 41 	call	#0x4196	
}
    414c:	3b 41       	pop	r11		
    414e:	30 41       	ret			

00004150 <BlinkYellow>:
    }
  }
}

void BlinkYellow (uint16_t ExecutionTime)
{
    4150:	0b 12       	push	r11		
    4152:	0b 4f       	mov	r15,	r11	
  SetLeds (YELLOW, 1);
    4154:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4156:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    415a:	b0 12 96 41 	call	#0x4196	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    415e:	0f 4b       	mov	r11,	r15	
    4160:	0f 5f       	rla	r15		
    4162:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4164:	1d 42 70 01 	mov	&0x0170,r13	
    4168:	0e 43       	clr	r14		
    416a:	07 3c       	jmp	$+16     	;abs 0x417a
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    416c:	1c 42 70 01 	mov	&0x0170,r12	
    4170:	0d 9c       	cmp	r12,	r13	
    4172:	fc 27       	jz	$-6      	;abs 0x416c
    {
      TicksPassed++; // increment ticks counter
    4174:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4176:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    417a:	0e 9f       	cmp	r15,	r14	
    417c:	f7 2b       	jnc	$-16     	;abs 0x416c

void BlinkYellow (uint16_t ExecutionTime)
{
  SetLeds (YELLOW, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
    417e:	4e 43       	clr.b	r14		
    4180:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    4184:	b0 12 96 41 	call	#0x4196	
}
    4188:	3b 41       	pop	r11		
    418a:	30 41       	ret			

0000418c <InitLeds>:
#include <iomacros.h>
#include "Led.h"

void InitLeds (uint8_t Colors)
{
  LEDDIR |= Colors;
    418c:	c2 df 32 00 	bis.b	r15,	&0x0032	
  LEDPIN = 0;
    4190:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    4194:	30 41       	ret			

00004196 <SetLeds>:

void SetLeds (uint8_t Colors, uint8_t On)
{
  if (On) LEDPIN |= Colors;
    4196:	4e 93       	tst.b	r14		
    4198:	03 24       	jz	$+8      	;abs 0x41a0
    419a:	c2 df 31 00 	bis.b	r15,	&0x0031	
    419e:	30 41       	ret			
  else    LEDPIN &= ~Colors;
    41a0:	c2 cf 31 00 	bic.b	r15,	&0x0031	
    41a4:	30 41       	ret			

000041a6 <ToggleLeds>:
}

void ToggleLeds (uint8_t Colors)
{
  LEDPIN ^= Colors;
    41a6:	c2 ef 31 00 	xor.b	r15,	&0x0031	
}
    41aa:	30 41       	ret			

000041ac <InitClock>:

#define ACLOCK    32768  /* rate of the Aclock                               */

void InitClock (void)
{
	TACTL  = TASSEL0 + TACLR + ID0 + ID1 + TAIE; /* ACLK, clear TAR, set clock divider at 8 */
    41ac:	b2 40 c6 01 	mov	#454,	&0x0160	;#0x01c6
    41b0:	60 01 
	TACCR0   = 0;  /* start first interrupt right away     */
    41b2:	82 43 72 01 	mov	#0,	&0x0172	;r3 As==00
	TACCTL0  = CCIE;            /* CCR0 interrupt enabled                        */
    41b6:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    41ba:	62 01 
	TACTL |= MC1;		    /* Start Timer_a in continious mode */  
    41bc:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    41c0:	60 01 
}
    41c2:	30 41       	ret			

000041c4 <ContextSwitch>:
static uint8_t Contexts[NUMTASKS];
static uint8_t CurrentContext = 0;

void ContextSwitch()
{
	Contexts[CurrentContext] = LEDPIN; // store current context
    41c4:	5f 42 00 11 	mov.b	&0x1100,r15	
    41c8:	4e 4f       	mov.b	r15,	r14	
    41ca:	de 42 31 00 	mov.b	&0x0031,4354(r14);0x1102(r14)
    41ce:	02 11 
	CurrentContext++;
    41d0:	5f 53       	inc.b	r15		
    41d2:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	// TODO set this to 0xFF for leds
	LEDPIN = 0; // disable all leds
    41d6:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    41da:	30 41       	ret			

000041dc <ResumeContext>:

void ResumeContext()
{
	CurrentContext--;
    41dc:	5f 42 00 11 	mov.b	&0x1100,r15	
    41e0:	7f 53       	add.b	#-1,	r15	;r3 As==11
    41e2:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	LEDPIN = Contexts[CurrentContext]; // resume context
    41e6:	7f f3       	and.b	#-1,	r15	;r3 As==11
    41e8:	3f 50 02 11 	add	#4354,	r15	;#0x1102
    41ec:	e2 4f 31 00 	mov.b	@r15,	&0x0031	
}
    41f0:	30 41       	ret			

000041f2 <IntDisable>:

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    41f2:	0f 42       	mov	r2,	r15	
  _DINT();
    41f4:	32 c2       	dint			
  return (sw);
}
    41f6:	30 41       	ret			

000041f8 <RestoreSW>:

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    41f8:	02 4f       	mov	r15,	r2	
}  
    41fa:	30 41       	ret			

000041fc <InitTasks>:
void InitTasks (void)
{			
  uint8_t i=NUMTASKS-1; 
  do { 
    Taskp t = &Tasks[i];
    t->Flags = t->Activated = t->Invoked = 0;
    41fc:	3f 40 3f 11 	mov	#4415,	r15	;#0x113f
    4200:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4204:	0e 4f       	mov	r15,	r14	
    4206:	3e 53       	add	#-1,	r14	;r3 As==11
    4208:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    420c:	6e 4e       	mov.b	@r14,	r14	
    420e:	7e f3       	and.b	#-1,	r14	;r3 As==11
    4210:	8f 4e 01 00 	mov	r14,	1(r15)	;0x0001(r15)
    4214:	cf 43 f0 ff 	mov.b	#0,	-16(r15);r3 As==00, 0xfff0(r15)
    4218:	0e 4f       	mov	r15,	r14	
    421a:	3e 50 ef ff 	add	#-17,	r14	;#0xffef
    421e:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    4222:	6e 4e       	mov.b	@r14,	r14	
    4224:	7e f3       	and.b	#-1,	r14	;r3 As==11
    4226:	8f 4e f1 ff 	mov	r14,	-15(r15);0xfff1(r15)
    422a:	cf 43 e0 ff 	mov.b	#0,	-32(r15);r3 As==00, 0xffe0(r15)
    422e:	0e 4f       	mov	r15,	r14	
    4230:	3e 50 df ff 	add	#-33,	r14	;#0xffdf
    4234:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    4238:	6e 4e       	mov.b	@r14,	r14	
    423a:	7e f3       	and.b	#-1,	r14	;r3 As==11
    423c:	8f 4e e1 ff 	mov	r14,	-31(r15);0xffe1(r15)
  } while (i--);
}
    4240:	30 41       	ret			

00004242 <RegisterTask>:
 * Each priority level has at most one task.
 */

uint8_t RegisterTask (uint16_t Phasing, uint16_t Period, uint16_t ExecutionTime,
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
    4242:	0b 12       	push	r11		
    4244:	0a 12       	push	r10		
    4246:	09 12       	push	r9		
    4248:	05 12       	push	r5		
    424a:	05 41       	mov	r1,	r5	
    424c:	35 50 0a 00 	add	#10,	r5	;#0x000a
    4250:	6b 45       	mov.b	@r5,	r11	
    4252:	59 45 02 00 	mov.b	2(r5),	r9	;0x0002(r5)
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
    4256:	7b 90 03 00 	cmp.b	#3,	r11	;#0x0003
    425a:	02 28       	jnc	$+6      	;abs 0x4260
    425c:	5f 43       	mov.b	#1,	r15	;r3 As==01
    425e:	2e 3c       	jmp	$+94     	;abs 0x42bc
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately
    4260:	0e 5e       	rla	r14		
    4262:	0e 5e       	rla	r14		

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
    4264:	0e 93       	tst	r14		
    4266:	03 20       	jnz	$+8      	;abs 0x426e
    4268:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    426c:	27 3c       	jmp	$+80     	;abs 0x42bc

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    426e:	05 42       	mov	r2,	r5	
  _DINT();
    4270:	32 c2       	dint			
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
    4272:	7b f3       	and.b	#-1,	r11	;r3 As==11
    4274:	0b 5b       	rla	r11		
    4276:	0b 5b       	rla	r11		
    4278:	0b 5b       	rla	r11		
    427a:	0b 5b       	rla	r11		
    427c:	3b 50 18 11 	add	#4376,	r11	;#0x1118
  if (t->Flags) rtc = E_BUSY; 
    4280:	1a 4b 08 00 	mov	8(r11),	r10	;0x0008(r11)
    4284:	0a 93       	tst	r10		
    4286:	02 24       	jz	$+6      	;abs 0x428c
    4288:	6f 43       	mov.b	#2,	r15	;r3 As==10
    428a:	17 3c       	jmp	$+48     	;abs 0x42ba
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
    428c:	0f 5f       	rla	r15		
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
  if (t->Flags) rtc = E_BUSY; 
  else {
    t->NextRelease = 0 + Phasing;
    428e:	0f 5f       	rla	r15		
    4290:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
    t->Period    = Period; 
    4294:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    t->NextPendingDeadline = t->NextRelease + Period;
    4298:	2e 5b       	add	@r11,	r14	
    429a:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    t->Activated = t->Invoked = 0; 
    429e:	cb 4a 07 00 	mov.b	r10,	7(r11)	;0x0007(r11)
    42a2:	cb 4a 06 00 	mov.b	r10,	6(r11)	;0x0006(r11)
    t->Taskf     = TaskFunc; 
    42a6:	8b 4c 0c 00 	mov	r12,	12(r11)	;0x000c(r11)
    t->ExecutionTime = ExecutionTime;
    42aa:	8b 4d 0a 00 	mov	r13,	10(r11)	;0x000a(r11)
    t->Flags     = Flags | TRIGGERED;
    42ae:	79 d0 40 00 	bis.b	#64,	r9	;#0x0040
    42b2:	79 f3       	and.b	#-1,	r9	;r3 As==11
    42b4:	8b 49 08 00 	mov	r9,	8(r11)	;0x0008(r11)
    42b8:	4f 4a       	mov.b	r10,	r15	
}

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    42ba:	02 45       	mov	r5,	r2	
    t->Flags     = Flags | TRIGGERED;

  }
  RestoreSW (sw);
  return (rtc);
}
    42bc:	35 41       	pop	r5		
    42be:	39 41       	pop	r9		
    42c0:	3a 41       	pop	r10		
    42c2:	3b 41       	pop	r11		
    42c4:	30 41       	ret			

000042c6 <UnRegisterTask>:

uint8_t UnRegisterTask (uint8_t t)
{
  Tasks[t].Flags = 0;
    42c6:	7f f3       	and.b	#-1,	r15	;r3 As==11
    42c8:	0f 5f       	rla	r15		
    42ca:	1f 53       	inc	r15		
    42cc:	0f 5f       	rla	r15		
    42ce:	0f 5f       	rla	r15		
    42d0:	0f 5f       	rla	r15		
    42d2:	8f 43 18 11 	mov	#0,	4376(r15);r3 As==00, 0x1118(r15)
  return (E_SUCCESS);
}  
    42d6:	4f 43       	clr.b	r15		
    42d8:	30 41       	ret			

000042da <gcd>:

  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/
// for calculating hyper period
int gcd(int a, int b) {
    42da:	0b 12       	push	r11		
    42dc:	0a 12       	push	r10		
    42de:	09 12       	push	r9		
    42e0:	09 4e       	mov	r14,	r9	
  if (b == 0) {
    42e2:	0e 93       	tst	r14		
    42e4:	06 24       	jz	$+14     	;abs 0x42f2
    return a;
  }
  return gcd(b, a % b);
    42e6:	0c 4f       	mov	r15,	r12	
    42e8:	0a 4e       	mov	r14,	r10	
    42ea:	b0 12 e6 44 	call	#0x44e6	
    42ee:	0f 49       	mov	r9,	r15	
    42f0:	f7 3f       	jmp	$-16     	;abs 0x42e0
}
    42f2:	39 41       	pop	r9		
    42f4:	3a 41       	pop	r10		
    42f6:	3b 41       	pop	r11		
    42f8:	30 41       	ret			

000042fa <lcm>:

// for calculating hyper period
int lcm(int a, int b) {
    42fa:	0b 12       	push	r11		
    42fc:	0a 12       	push	r10		
    42fe:	09 12       	push	r9		
    4300:	08 12       	push	r8		
    4302:	08 4e       	mov	r14,	r8	
    4304:	09 4e       	mov	r14,	r9	
    4306:	0a 4f       	mov	r15,	r10	
  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/
// for calculating hyper period
int gcd(int a, int b) {
  if (b == 0) {
    4308:	09 93       	tst	r9		
    430a:	07 24       	jz	$+16     	;abs 0x431a
    return a;
  }
  return gcd(b, a % b);
    430c:	0c 4a       	mov	r10,	r12	
    430e:	0a 49       	mov	r9,	r10	
    4310:	b0 12 e6 44 	call	#0x44e6	
    4314:	0a 49       	mov	r9,	r10	
    4316:	09 4e       	mov	r14,	r9	
    4318:	f7 3f       	jmp	$-16     	;abs 0x4308
    431a:	02 12       	push	r2		
    431c:	32 c2       	dint			
    431e:	03 43       	nop			
    4320:	82 48 32 01 	mov	r8,	&0x0132	
    4324:	82 4f 38 01 	mov	r15,	&0x0138	
    4328:	1c 42 3a 01 	mov	&0x013a,r12	
    432c:	32 41       	pop	r2		
    432e:	b0 12 e6 44 	call	#0x44e6	
}

// for calculating hyper period
int lcm(int a, int b) {
  return (a * b) / gcd(a, b);
}
    4332:	0f 4c       	mov	r12,	r15	
    4334:	38 41       	pop	r8		
    4336:	39 41       	pop	r9		
    4338:	3a 41       	pop	r10		
    433a:	3b 41       	pop	r11		
    433c:	30 41       	ret			

0000433e <TimerIntrpt>:

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
{
    433e:	0f 12       	push	r15		
    4340:	0e 12       	push	r14		
    4342:	0d 12       	push	r13		
    4344:	0c 12       	push	r12		
    4346:	0b 12       	push	r11		
    4348:	0a 12       	push	r10		
    434a:	09 12       	push	r9		
    434c:	08 12       	push	r8		
    434e:	07 12       	push	r7		
  ContextSwitch();
    4350:	b0 12 c4 41 	call	#0x41c4	

  /* Super simple, single task example */
  // This part is to only get the next interrupt time
  // uint16_t hyperperiod = 0;
  uint8_t i = 0;
  uint16_t oldNextInterruptTime = NextInterruptTime; // This is the current time when interrupt occurrs
    4354:	18 42 48 11 	mov	&0x1148,r8	
  // for (i = 0; i < NUMTASKS; i++) {
  //   Taskp t = &Tasks[i];
  //   hyperperiod = lcm(hyperperiod, t->Period);
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    4358:	07 48       	mov	r8,	r7	
    435a:	37 f0 ff 0f 	and	#4095,	r7	;#0x0fff
    435e:	04 24       	jz	$+10     	;abs 0x4368
    4360:	3f 40 18 11 	mov	#4376,	r15	;#0x1118
// for calculating hyper period
int lcm(int a, int b) {
  return (a * b) / gcd(a, b);
}

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
    4364:	0e 4f       	mov	r15,	r14	
    4366:	0f 3c       	jmp	$+32     	;abs 0x4386
    4368:	3f 40 18 11 	mov	#4376,	r15	;#0x1118
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    for (i = 0; i < NUMTASKS; i++) {
      Taskp t = &Tasks[i];
      t->NextRelease += t->Period;
    436c:	9f 5f 04 00 	add	4(r15),	0(r15)	;0x0004(r15), 0x0000(r15)
    4370:	00 00 
      t->Activated++;
    4372:	df 53 06 00 	inc.b	6(r15)		;0x0006(r15)
      t->FlagNextInterrupt = 0;
    4376:	cf 43 0f 00 	mov.b	#0,	15(r15)	;r3 As==00, 0x000f(r15)
    437a:	3f 50 10 00 	add	#16,	r15	;#0x0010
  //   Taskp t = &Tasks[i];
  //   hyperperiod = lcm(hyperperiod, t->Period);
  // }

  if (NextInterruptTime % (1024*4) == 0) {
    for (i = 0; i < NUMTASKS; i++) {
    437e:	3f 90 48 11 	cmp	#4424,	r15	;#0x1148
    4382:	f4 23       	jnz	$-22     	;abs 0x436c
    4384:	ed 3f       	jmp	$-36     	;abs 0x4360
  }


  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    if (t->FlagNextInterrupt == TT) {
    4386:	ee 92 0f 00 	cmp.b	#4,	15(r14)	;r2 As==10, 0x000f(r14)
    438a:	05 20       	jnz	$+12     	;abs 0x4396
      t->NextRelease += t->Period;
    438c:	9e 5e 04 00 	add	4(r14),	0(r14)	;0x0004(r14), 0x0000(r14)
    4390:	00 00 
      t->FlagNextInterrupt = 0;
    4392:	ce 43 0f 00 	mov.b	#0,	15(r14)	;r3 As==00, 0x000f(r14)
    4396:	3e 50 10 00 	add	#16,	r14	;#0x0010
      t->FlagNextInterrupt = 0;
    }
  }


  for (i = 0; i < NUMTASKS; i++) {
    439a:	3e 90 48 11 	cmp	#4424,	r14	;#0x1148
    439e:	f3 23       	jnz	$-24     	;abs 0x4386
      t->FlagNextInterrupt = 0;
    }
  }

  Taskp t = &Tasks[0];
  NextInterruptTime = t->NextRelease;
    43a0:	1e 42 18 11 	mov	&0x1118,r14	


  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    DetermineNextInterruptTime(t->NextRelease);
    43a4:	1d 42 18 11 	mov	&0x1118,r13	
    43a8:	0e 9d       	cmp	r13,	r14	
    43aa:	01 2c       	jc	$+4      	;abs 0x43ae
    43ac:	0d 4e       	mov	r14,	r13	
    43ae:	1e 42 28 11 	mov	&0x1128,r14	
    43b2:	0d 9e       	cmp	r14,	r13	
    43b4:	01 2c       	jc	$+4      	;abs 0x43b8
    43b6:	0e 4d       	mov	r13,	r14	
    43b8:	19 42 38 11 	mov	&0x1138,r9	
    43bc:	0e 99       	cmp	r9,	r14	
    43be:	01 2c       	jc	$+4      	;abs 0x43c2
    43c0:	09 4e       	mov	r14,	r9	
    43c2:	82 49 48 11 	mov	r9,	&0x1148	
  }

  
  for (i = 0; i < NUMTASKS; i++) {
    Taskp t = &Tasks[i];
    if (t->NextRelease == NextInterruptTime) {
    43c6:	29 9f       	cmp	@r15,	r9	
    43c8:	02 20       	jnz	$+6      	;abs 0x43ce
      t->FlagNextInterrupt = TT;
    43ca:	ef 42 0f 00 	mov.b	#4,	15(r15)	;r2 As==10, 0x000f(r15)
    }
    if ((oldNextInterruptTime % t->Period == 0) && (oldNextInterruptTime % (1024*4) != 0)) {
    43ce:	0c 48       	mov	r8,	r12	
    43d0:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    43d4:	b0 12 ca 44 	call	#0x44ca	
    43d8:	0e 93       	tst	r14		
    43da:	04 20       	jnz	$+10     	;abs 0x43e4
    43dc:	07 9e       	cmp	r14,	r7	
    43de:	02 24       	jz	$+6      	;abs 0x43e4
      t->Activated++;
    43e0:	df 53 06 00 	inc.b	6(r15)		;0x0006(r15)
    43e4:	3f 50 10 00 	add	#16,	r15	;#0x0010
    Taskp t = &Tasks[i];
    DetermineNextInterruptTime(t->NextRelease);
  }

  
  for (i = 0; i < NUMTASKS; i++) {
    43e8:	3f 90 48 11 	cmp	#4424,	r15	;#0x1148
    43ec:	ec 23       	jnz	$-38     	;abs 0x43c6
  /* End of example*/

  /* ---------------------------------------------------------------- */
 

  TACCR0 = NextInterruptTime;
    43ee:	82 49 72 01 	mov	r9,	&0x0172	

  CALL_SCHEDULER;
    43f2:	3f 40 18 11 	mov	#4376,	r15	;#0x1118
    43f6:	b0 12 12 44 	call	#0x4412	

  ResumeContext();
    43fa:	b0 12 dc 41 	call	#0x41dc	
}
    43fe:	37 41       	pop	r7		
    4400:	38 41       	pop	r8		
    4402:	39 41       	pop	r9		
    4404:	3a 41       	pop	r10		
    4406:	3b 41       	pop	r11		
    4408:	3c 41       	pop	r12		
    440a:	3d 41       	pop	r13		
    440c:	3e 41       	pop	r14		
    440e:	3f 41       	pop	r15		
    4410:	00 13       	reti			

00004412 <Scheduler_P_FP>:
  /* ---------------------------------------------------------------- */

}

void Scheduler_P_FP (Task Tasks[])
{ 
    4412:	0b 12       	push	r11		
    4414:	0a 12       	push	r10		
    4416:	09 12       	push	r9		
    4418:	0a 4f       	mov	r15,	r10	
  /* ----------------------- INSERT CODE HERE ----------------------- */

  /* Super simple, single task example */

  uint8_t oldBP = BusyPrio; // Set BusyPrio as the priority of the currently running task (the one that was executing just before the scheduler is called)
    441a:	59 42 16 11 	mov.b	&0x1116,r9	

  for(BusyPrio = 0; BusyPrio < oldBP; BusyPrio++) {
    441e:	c2 43 16 11 	mov.b	#0,	&0x1116	;r3 As==00
    4422:	21 3c       	jmp	$+68     	;abs 0x4466
    Taskp t = &Tasks[BusyPrio];
    4424:	5b 42 16 11 	mov.b	&0x1116,r11	
    4428:	7b f3       	and.b	#-1,	r11	;r3 As==11
    442a:	0b 5b       	rla	r11		
    442c:	0b 5b       	rla	r11		
    442e:	0b 5b       	rla	r11		
    4430:	0b 5b       	rla	r11		
    4432:	0b 5a       	add	r10,	r11	
    while ((t->Activated != t->Invoked) && (t->Flags & TRIGGERED))
    4434:	0d 3c       	jmp	$+28     	;abs 0x4450
    {
      _EINT(); 
    4436:	32 d2       	eint			

static void ExecuteTask (Taskp t)
{
  /* ----------------------- INSERT CODE HERE ----------------------- */

  t->Invoked++;
    4438:	5e 53       	inc.b	r14		
    443a:	cb 4e 07 00 	mov.b	r14,	7(r11)	;0x0007(r11)
  t->Taskf(t->ExecutionTime); // execute task
    443e:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    4442:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
    Taskp t = &Tasks[BusyPrio];
    while ((t->Activated != t->Invoked) && (t->Flags & TRIGGERED))
    {
      _EINT(); 
      ExecuteTask(t);
      _DINT();
    4446:	32 c2       	dint			
      t->Activated = t->Invoked;
    4448:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    444c:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)

  uint8_t oldBP = BusyPrio; // Set BusyPrio as the priority of the currently running task (the one that was executing just before the scheduler is called)

  for(BusyPrio = 0; BusyPrio < oldBP; BusyPrio++) {
    Taskp t = &Tasks[BusyPrio];
    while ((t->Activated != t->Invoked) && (t->Flags & TRIGGERED))
    4450:	5e 4b 07 00 	mov.b	7(r11),	r14	;0x0007(r11)
    4454:	cb 9e 06 00 	cmp.b	r14,	6(r11)	;0x0006(r11)
    4458:	04 24       	jz	$+10     	;abs 0x4462
    445a:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    445e:	08 00 
    4460:	ea 23       	jnz	$-42     	;abs 0x4436

  /* Super simple, single task example */

  uint8_t oldBP = BusyPrio; // Set BusyPrio as the priority of the currently running task (the one that was executing just before the scheduler is called)

  for(BusyPrio = 0; BusyPrio < oldBP; BusyPrio++) {
    4462:	d2 53 16 11 	inc.b	&0x1116	
    4466:	c2 99 16 11 	cmp.b	r9,	&0x1116	
    446a:	dc 2b       	jnc	$-70     	;abs 0x4424
  //   ExecuteTask(t);
  // }
  /* End of example*/

  /* ---------------------------------------------------------------- */
}
    446c:	39 41       	pop	r9		
    446e:	3a 41       	pop	r10		
    4470:	3b 41       	pop	r11		
    4472:	30 41       	ret			

00004474 <Scheduler_P_EDF>:
void Scheduler_P_EDF (Task Tasks[])
{ 
  /* insert code */
  /* Use ExecuteTask function to execute a task */
  /* insert code */
}
    4474:	30 41       	ret			

00004476 <StartTracking>:
static uint16_t Totals[TT_MAX];
static uint8_t JobsExecuted;

void StartTracking(uint8_t index)
{
    StartTimes[index] = TAR;
    4476:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4478:	0f 5f       	rla	r15		
    447a:	9f 42 70 01 	mov	&0x0170,4364(r15);0x110c(r15)
    447e:	0c 11 
}
    4480:	30 41       	ret			

00004482 <StopTracking>:

void StopTracking(uint8_t index)
{
    Totals[index] += TAR - StartTimes[index];
    4482:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4484:	0f 5f       	rla	r15		
    4486:	1e 42 70 01 	mov	&0x0170,r14	
    448a:	1e 5f 10 11 	add	4368(r15),r14	;0x1110(r15)
    448e:	1e 8f 0c 11 	sub	4364(r15),r14	;0x110c(r15)
    4492:	8f 4e 10 11 	mov	r14,	4368(r15);0x1110(r15)
}
    4496:	30 41       	ret			

00004498 <AddJobExecution>:

void AddJobExecution()
{
    JobsExecuted++;
    4498:	d2 53 14 11 	inc.b	&0x1114	
}
    449c:	30 41       	ret			

0000449e <PrintResults>:

void PrintResults()
{
    P1OUT = Totals[TT_TIMER_INTERRUPT] & 0xFF;
    449e:	3e 40 10 11 	mov	#4368,	r14	;#0x1110
    44a2:	2d 4e       	mov	@r14,	r13	
    44a4:	c2 4d 21 00 	mov.b	r13,	&0x0021	
    P2OUT = Totals[TT_TIMER_INTERRUPT] >> 8;
    44a8:	3f 4e       	mov	@r14+,	r15	
    44aa:	0f 4d       	mov	r13,	r15	
    44ac:	8f 10       	swpb	r15		
    44ae:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44b0:	c2 4f 29 00 	mov.b	r15,	&0x0029	

    P3OUT = Totals[TT_SCHEDULER] & 0xFF;
    44b4:	2f 4e       	mov	@r14,	r15	
    44b6:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    P4OUT = Totals[TT_SCHEDULER] >> 8;
    44ba:	8f 10       	swpb	r15		
    44bc:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44be:	c2 4f 1d 00 	mov.b	r15,	&0x001d	

    P6OUT = JobsExecuted;
    44c2:	d2 42 14 11 	mov.b	&0x1114,&0x0035	
    44c6:	35 00 
    44c8:	30 41       	ret			

000044ca <__udivmodhi4>:
    44ca:	0e ee       	xor	r14,	r14	
    44cc:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    44d0:	05 3c       	jmp	$+12     	;abs 0x44dc
    44d2:	0d 10       	rrc	r13		
    44d4:	0e 6e       	rlc	r14		
    44d6:	0e 9a       	cmp	r10,	r14	
    44d8:	01 28       	jnc	$+4      	;abs 0x44dc
    44da:	0e 8a       	sub	r10,	r14	
    44dc:	0c 6c       	rlc	r12		
    44de:	0d 6d       	rlc	r13		
    44e0:	1b 83       	dec	r11		
    44e2:	f7 23       	jnz	$-16     	;abs 0x44d2
    44e4:	30 41       	ret			

000044e6 <__divmodhi4>:
    44e6:	0d 43       	clr	r13		
    44e8:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    44ec:	03 28       	jnc	$+8      	;abs 0x44f4
    44ee:	3c e3       	inv	r12		
    44f0:	1c 53       	inc	r12		
    44f2:	2d d2       	bis	#4,	r13	;r2 As==10
    44f4:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    44f8:	03 28       	jnc	$+8      	;abs 0x4500
    44fa:	3a e3       	inv	r10		
    44fc:	1a 53       	inc	r10		
    44fe:	3d d2       	bis	#8,	r13	;r2 As==11
    4500:	b0 12 ca 44 	call	#0x44ca	
    4504:	0d 10       	rrc	r13		
    4506:	2d b2       	bit	#4,	r13	;r2 As==10
    4508:	04 28       	jnc	$+10     	;abs 0x4512
    450a:	3e e3       	inv	r14		
    450c:	1e 53       	inc	r14		
    450e:	3c e3       	inv	r12		
    4510:	1c 53       	inc	r12		
    4512:	3d b2       	bit	#8,	r13	;r2 As==11
    4514:	02 28       	jnc	$+6      	;abs 0x451a
    4516:	3c e3       	inv	r12		
    4518:	1c 53       	inc	r12		
    451a:	30 41       	ret			

Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	30 40 30 40 30 40 30 40 30 40 30 40 3e 43 30 40     0@0@0@0@0@0@>C0@
    fff0:	30 40 30 40 30 40 30 40 30 40 30 40 30 40 00 40     0@0@0@0@0@0@0@.@
